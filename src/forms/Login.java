/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forms;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import static java.lang.Thread.sleep;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import net.proteanit.sql.DbUtils;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.GregorianCalendar;

/**
 *
 * @author sunny
 */
public class Login extends javax.swing.JFrame {
    Connection conn=null,conn1=null,conn2=null,connSQLite=null;
    PreparedStatement pst=null,pst1=null,pst2=null;
    ResultSet rs=null,rs1=null,rs2=null;
    /**
     * Creates new form Login
     */
    public Login() {
        initComponents();
        conn=javaMySqlConnect.ConnectDB();
        conn1=javaMySqlConnect.ConnectDB();
        conn2=javaMySqlConnect.ConnectDB();
        connSQLite=Connect.ConnectDB();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtUsername = new javax.swing.JTextField();
        txtPassword = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cmbAuthority = new javax.swing.JComboBox<>();
        btnLogin = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        lblMemberLoginLogo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtUsername.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        txtUsername.setForeground(new java.awt.Color(39, 66, 113));
        txtUsername.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtUsername.setToolTipText("Login ID");
        txtUsername.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        getContentPane().add(txtUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 160, 310, 20));

        txtPassword.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        txtPassword.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtPassword.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        txtPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPasswordKeyPressed(evt);
            }
        });
        getContentPane().add(txtPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 190, 310, 20));

        jLabel1.setBackground(new java.awt.Color(6, 93, 171));
        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 14)); // NOI18N
        jLabel1.setForeground(java.awt.Color.white);
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Access Secured By CodersTechnologies");
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 450, -1));

        jLabel2.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel2.setText("Authority");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 110, 20));

        jLabel3.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel3.setText("Password");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 110, 20));

        jLabel4.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel4.setText("Username");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, -1, 20));

        cmbAuthority.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Administrator", "Doctor", "Staff", "Employee" }));
        getContentPane().add(cmbAuthority, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 130, 310, -1));

        btnLogin.setText("Sign-In");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });
        getContentPane().add(btnLogin, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 220, 110, -1));

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        getContentPane().add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 220, 90, -1));

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        getContentPane().add(btnClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 220, 110, -1));

        lblMemberLoginLogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMemberLoginLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/member-login-button.png"))); // NOI18N
        getContentPane().add(lblMemberLoginLogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 16, 440, 110));

        setSize(new java.awt.Dimension(448, 252));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //Program to display Date and Time
    String logDate,logTime;
    public void CurrentDate(){   
        Thread clock;
        clock = new Thread(){
            @Override
            public void run(){
                for(;;){
                    Calendar cal=new GregorianCalendar();
                    int month=cal.get(Calendar.MONTH);
                    int day=cal.get(Calendar.DAY_OF_MONTH);
                    int year=cal.get(Calendar.YEAR);
                    logDate=day+"-"+month+"-"+year;

                    int second= cal.get(Calendar.SECOND);
                    int minute=cal.get(Calendar.MINUTE);
                    int hour=cal.get(Calendar.HOUR_OF_DAY);
                    String AM_PM = cal.get(Calendar.AM_PM) == 0 ? "AM" : "PM";
                    logTime=hour+":"+minute+":"+second+" "+AM_PM;
                    try {
                        sleep(1000);
                    } 
                    catch (InterruptedException ex) {
                        //Logger.getLogger(Product.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        };
        clock.start();  
    }    //Program to get MAC ID of Login PC
    String macAddress,ipAddress;
    public void getMAC(){
        InetAddress ip;
        try{
            ip = InetAddress.getLocalHost();
            System.out.println("Current IP address : " + ip.getHostAddress());
            ipAddress=ip.getHostAddress();
            Enumeration<NetworkInterface> networks = NetworkInterface.getNetworkInterfaces();
            while(networks.hasMoreElements()){
                //NetworkInterface network = NetworkInterface.getByInetAddress(ip);
                NetworkInterface network=networks.nextElement();

                byte[] mac= network.getHardwareAddress();

                //System.out.print("Current MAC address : ");
                StringBuilder sb = new StringBuilder();
                for (int i = 0; i < mac.length; i++) {
                        sb.append(String.format("%02X%s", mac[i], (i < mac.length - 1) ? "-" : ""));
                }
                //System.out.println(sb.toString());
                macAddress=String.valueOf(sb.toString());
                JOptionPane.showMessageDialog(null, "MAC is "+macAddress+". IP is "+ipAddress);
            }            
        }
        catch (UnknownHostException | SocketException e) {
	}
    }
    //Program to create serverLogEntries
    public void createServerLogEntries(){
        try{
            String sql="insert into logmaster(log_date,log_time,log_ip_address,"
                    + "log_device_mac_id,log_username,log_authority,log_empID,log_empName)values(?,?,?,?,?,?,?,?)";
            pst1=conn1.prepareStatement(sql);
            pst1.setString(1, logDate);
            pst1.setString(2, logTime);
            pst1.setString(3, ipAddress);
            pst1.setString(4, macAddress);
            pst1.setString(5, txtUsername.getText());
            pst1.setString(6, cmbAuthority.getSelectedItem().toString());
            pst1.setInt(7, empID);
            pst1.setString(8, empName);
            pst1.execute();
            pst1.close();
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }
    int logID=0;
    //Program to getLocalLog
    public void getLocalLog(){
        try{
            String sql="Select * from user_log";
            pst=connSQLite.prepareStatement(sql);
            rs=pst.executeQuery();
            while(rs.next()){
                logID=rs.getInt("log_id");
            }
            logID++;
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }
    //Program to create LocalLogEntries
    public void createLocalLogEntries(){
        try{
            String sql="insert into user_log(log_date,log_time,log_device_ip_address,"
                    + "log_device_mac_id,log_username,log_authority,log_id,log_empID,log_empName)values(?,?,?,?,?,?,?,?,?)";
            pst2=connSQLite.prepareStatement(sql);
            pst2.setString(1, logDate);
            pst2.setString(2, logTime);
            pst2.setString(3, ipAddress);
            pst2.setString(4, macAddress);
            pst2.setString(5, txtUsername.getText());
            pst2.setString(6, cmbAuthority.getSelectedItem().toString());
            pst2.setInt(7, logID);
            pst2.setInt(8, empID);
            pst2.setString(9, empName);
            pst2.execute();
            pst2.close();
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }
    //Program to run on Login Icon Click
    String empName;
    int empID;    
    public void login(){
        String pass=new String(txtPassword.getPassword());        
        if("Administrator".equals(cmbAuthority.getSelectedItem().toString())){
            try{
                String sql="Select * from users where username=? and password=? and authority=?";
                pst=conn.prepareStatement(sql);
                pst.setString(1, txtUsername.getText());
                pst.setString(2, pass);
                pst.setString(3, cmbAuthority.getSelectedItem().toString());
                rs=pst.executeQuery();
                if(rs.next()){
                    empName=rs.getString("emp_Name");
                    empID=rs.getInt("emp_ID");
                    getLocalLog();
                    createServerLogEntries();
                    createLocalLogEntries();
                    AdminDashboard adminDash=new AdminDashboard();
                    adminDash.setVisible(true);
                    this.dispose();
                }
                else{
                    JOptionPane.showMessageDialog(null, "Invalid Access Credentials","ACCESS DENIED!",JOptionPane.ERROR_MESSAGE);
                }
                pst.close();
            }
            catch(SQLException | HeadlessException e){
                JOptionPane.showMessageDialog(null, e);
            }
        }
        if("Doctor".equals(cmbAuthority.getSelectedItem().toString())){
            try{
                String sql="Select * from users where username=? and password=? and authority=?";
                pst=conn.prepareStatement(sql);
                pst.setString(1, txtUsername.getText());
                pst.setString(2, pass);
                pst.setString(3, cmbAuthority.getSelectedItem().toString());
                rs=pst.executeQuery();
                if(rs.next()){
                    empName=rs.getString("emp_Name");
                    empID=rs.getInt("emp_ID");
                    getLocalLog();
                    createServerLogEntries();
                    createLocalLogEntries();
                    DoctorDashboard docDash=new DoctorDashboard();
                    docDash.setVisible(true);
                    this.dispose();
                }
                else{
                    JOptionPane.showMessageDialog(null, "Invalid Access Credentials","ACCESS DENIED!",JOptionPane.ERROR_MESSAGE);
                }
                pst.close();
            }
            catch(SQLException | HeadlessException e){
                JOptionPane.showMessageDialog(null, e);
            }
        }
        if("Staff".equals(cmbAuthority.getSelectedItem().toString())){
            try{
                String sql="Select * from users where username=? and password=? and authority=? and permission_status='Granted'";
                pst=conn.prepareStatement(sql);
                pst.setString(1, txtUsername.getText());
                pst.setString(2, pass);
                pst.setString(3, cmbAuthority.getSelectedItem().toString());
                rs=pst.executeQuery();
                if(rs.next()){
                    empName=rs.getString("emp_Name");
                    empID=rs.getInt("emp_ID");
                    getLocalLog();
                    createServerLogEntries();
                    createLocalLogEntries();
                    StaffDashboard staffDash=new StaffDashboard();
                    staffDash.setVisible(true);
                    this.dispose();
                }
                else{
                    JOptionPane.showMessageDialog(null, "Invalid Access Credentials","ACCESS DENIED!",JOptionPane.ERROR_MESSAGE);
                }
                pst.close();
            }
            catch(SQLException | HeadlessException e){
                JOptionPane.showMessageDialog(null, e);
            }
        }
        if("Employee".equals(cmbAuthority.getSelectedItem().toString())){
            try{
                String sql="Select * from users where username=? and password=? and authority=?";
                pst=conn.prepareStatement(sql);
                pst.setString(1, txtUsername.getText());
                pst.setString(2, pass);
                pst.setString(3, cmbAuthority.getSelectedItem().toString());
                rs=pst.executeQuery();
                if(rs.next()){
                    empName=rs.getString("emp_Name");
                    empID=rs.getInt("emp_ID");
                    getLocalLog();
                    createServerLogEntries();
                    createLocalLogEntries();
                    EmployeeDashboard empDash=new EmployeeDashboard();
                    empDash.setVisible(true);
                    this.dispose();
                }
                else{
                    JOptionPane.showMessageDialog(null, "Invalid Access Credentials","ACCESS DENIED!",JOptionPane.ERROR_MESSAGE);
                }
                pst.close();
            }
            catch(SQLException | HeadlessException e){
                JOptionPane.showMessageDialog(null, e);
            }
        }        
    }
    private void txtPasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPasswordKeyPressed
        // TODO add your handling code here:
        int key=evt.getKeyCode();
        if(key == KeyEvent.VK_ENTER){
            login();
        }
    }//GEN-LAST:event_txtPasswordKeyPressed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        CurrentDate();
        getMAC();
    }//GEN-LAST:event_formWindowOpened

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // TODO add your handling code here:
        login();
    }//GEN-LAST:event_btnLoginActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        txtUsername.setText("");
        txtPassword.setText("");
        cmbAuthority.setSelectedIndex(0);
    }//GEN-LAST:event_btnClearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Login().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnLogin;
    private javax.swing.JComboBox<String> cmbAuthority;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblMemberLoginLogo;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
